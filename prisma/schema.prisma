// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int               @id @default(autoincrement())
  name                 String
  email                String            @unique
  bio                  String?
  dob                  DateTime
  address              String?           @db.VarChar(255)
  country              String?
  profile_image        String?
  password             String
  latest_degree        String?
  institution          String?
  gender               String?
  country_code         Int
  phone                String
  exams_created        Exam[]
  created_at           DateTime          @default(now())
  updated_at           DateTime          @updatedAt
  exams_participated   ExamParticipant[]
  exam_question_scores ExamSubmission[]

  @@map("users")
}

model Exam {
  id                         Int                  @id @default(autoincrement())
  creator_id                 Int
  creator                    User                 @relation(fields: [creator_id], references: [id])
  name                       String
  description                String?
  banner                     String?
  thumbnail                  String?
  start_time                 DateTime
  duration                   BigInt
  ongoing                    Boolean              @default(false)
  is_private                 Boolean              @default(false)
  participant_count          Int                  @default(0)
  created_at                 DateTime             @default(now())
  updated_at                 DateTime             @updatedAt
  exam_participants          ExamParticipant[]
  private_exam_emails        PrivateExamEmail[]
  exam_tags                  ExamTag[]
  exam_question_scores       ExamSubmission[]
  exam_questions             ExamQuestion[]
  exam_questions_submissions QuestionSubmission[]

  @@map("exams")
}

model ExamParticipant {
  exam_id        Int
  participant_id Int
  exam           Exam @relation(fields: [exam_id], references: [id])
  user           User @relation(fields: [participant_id], references: [id])
  score          Int?
  finish_time    Int?
  rank           Int?

  @@unique([exam_id, participant_id])
  @@map("exam_participants")
}

model PrivateExamEmail {
  examId Int
  exam   Exam   @relation(fields: [examId], references: [id])
  email  String

  @@unique([examId, email])
  @@map("private_exam_emails")
}

model Tag {
  id         Int       @id @default(autoincrement())
  tag        String    @unique
  exam_tags  ExamTag[]
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt

  @@map("tags")
}

model ExamTag {
  exam_id Int
  tag_id  Int
  exam    Exam @relation(fields: [exam_id], references: [id])
  tag     Tag  @relation(fields: [tag_id], references: [id])

  @@unique([exam_id, tag_id])
  @@map("exam_tags")
}

model Question {
  id                   Int                  @id @default(autoincrement())
  question             String
  variant_id           Int
  variant              QuestionVariant      @relation(fields: [variant_id], references: [id])
  solution             String
  user_submissions     QuestionSubmission[]
  exam_questions       ExamQuestion[]
  created_at           DateTime             @default(now())
  updated_at           DateTime             @updatedAt
  question_options     QuestionOption[]
  exam_question_scores ExamSubmission[]

  @@map("questions")
}

model ExamQuestion {
  exam_id       Int
  question_id   Int
  exam          Exam     @relation(fields: [exam_id], references: [id])
  question      Question @relation(fields: [question_id], references: [id])
  mark          Int
  negative_mark Int

  @@unique([exam_id, question_id])
  @@map("exam_questions")
}

model QuestionVariant {
  id         Int        @id @default(autoincrement())
  variant    String     @unique
  questions  Question[]
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt

  @@map("question_variants")
}

model QuestionSubmission {
  exam_id     Int
  exam        Exam     @relation(fields: [exam_id], references: [id])
  question_id Int
  question    Question @relation(fields: [question_id], references: [id])
  user_id     Int
  option      String

  @@unique([exam_id, question_id, user_id, option])
  @@map("question_submissions")
}

model ExamSubmission {
  exam_id     Int      @unique
  exam        Exam     @relation(fields: [exam_id], references: [id])
  question_id Int
  question    Question @relation(fields: [question_id], references: [id])
  user_id     Int
  user        User     @relation(fields: [user_id], references: [id])
  score       Int      @default(0)

  @@unique([exam_id, question_id, user_id])
  @@map("exam_submissions")
}

model QuestionOption {
  question_id Int
  question    Question @relation(fields: [question_id], references: [id])
  option      String

  @@unique([question_id, option])
  @@map("question_options")
}
